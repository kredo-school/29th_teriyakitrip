document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ JavaScript Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü");

    let dayContainer = document.getElementById("day-container");
    let headerDaysContainer = document.querySelector(".swiper-wrapper");
    let addSpotContainer = document.getElementById("add-spot-container");
    let closeButton = document.getElementById("close-add-spot");
    let body = document.querySelector("body");
    let footer = document.querySelector("footer"); // „Éï„ÉÉ„Çø„ÉºÂèñÂæó
    let backButton = document.getElementById("back-button"); // Êàª„Çã„Éú„Çø„É≥ÂèñÂæó
    window.renderItineraryBody = renderItineraryBody;


    if (!dayContainer || !headerDaysContainer || !addSpotContainer) {
        console.error("‚ö†Ô∏è ÂøÖÈ†àË¶ÅÁ¥†„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô„ÄÇ");
        return;
    }

    function updateBodyDays() {
        console.log("‚úÖ „Éò„ÉÉ„ÉÄ„Éº„ÅÆÂ§âÊõ¥„ÇíÊ§úÁü•„ÄÅBody„ÇíÊõ¥Êñ∞");

        setTimeout(() => {
            let dayTabs = document.querySelectorAll(".swiper-slide.day-tab");
            if (dayTabs.length === 0) {
                console.warn("‚ö†Ô∏è Day„Çø„Éñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºÅ");
                return;
            }

            let currentDays = document.querySelectorAll(".day-body");
            let newDayCount = dayTabs.length;

            console.log(`üîç ÁèæÂú®„ÅÆ Day Êï∞: ${currentDays.length}, „Éò„ÉÉ„ÉÄ„Éº„ÅÆ Day Êï∞: ${newDayCount}`);

            // ‚úÖ Êó¢Â≠ò„ÅÆ Day „ÇíÂâäÈô§Ôºàadd-spot-container „ÇíÊ∂à„Åï„Å™„ÅÑÔºâ
            document.querySelectorAll(".day-body").forEach(day => day.remove());

            for (let i = 1; i <= newDayCount; i++) {
                let newDayBody = document.createElement("div");
                newDayBody.classList.add("row", "mt-2", "day-body");
                newDayBody.dataset.day = i;
                newDayBody.id = `day-body-${i}`;
                newDayBody.style.display = "flex";

                newDayBody.innerHTML = `
                    <div class="col-2">
                        <div class="day-box text-center text-light">Day ${i}</div>
                    </div>
                    <div class="plus-icon text-center">
                        <button type="button" class="border-0 bg-transparent plus-btn"  data-day="${i}">
                            <i class="fa-regular fa-square-plus"></i>
                        </button>
                    </div>
                `;

   
                document.getElementById("day-container").appendChild(newDayBody);
                console.log(`‚úÖ Body „Å´ Day ${i} „ÇíËøΩÂä†`);
            }

            // ‚úÖ „Äå+„Äç„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíÈÅ©Áî®
            bindAddSpotEvents();
        }, 50);
    }

    function bindAddSpotEvents() {
        if (!addSpotContainer || !footer) {
            console.error("‚ö†Ô∏è ÂøÖÈ†àË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô„ÄÇ");
            return;
        }

        console.log("üîÑ `+` „Éú„Çø„É≥„Å´„Ç§„Éô„É≥„Éà„Çí„Éê„Ç§„É≥„Éâ‰∏≠...");

        // ‚úÖ „Äå+„Äç„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
        document.querySelectorAll(".plus-icon button").forEach((btn) => {
            btn.addEventListener("click", function () {
                console.log("üü¢ `+` „Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„ÅüÔºÅ");
                
                 // ‚úÖ `selectedDay` „Çí‰øùÂ≠ò
            let selectedDay = this.closest(".day-body").dataset.day;
            sessionStorage.setItem("selectedDay", selectedDay);
            console.log(`‚úÖ ÈÅ∏Êäû„Åï„Çå„Åü Day „Çí‰øùÂ≠ò: ${selectedDay}`);


                // ‚úÖ add-spot-container „ÅÆË°®Á§∫
                addSpotContainer.style.display = "block";

                // ‚úÖ „Éï„ÉÉ„Çø„Éº„ÇíÈùûË°®Á§∫
                footer.style.display = "none"; 
                addSpotContainer.style.position = "fixed"; 
                addSpotContainer.style.top = "105px"; 
                addSpotContainer.style.left = "0vw";  
                addSpotContainer.style.width = "50vw";  
                addSpotContainer.style.height = "calc(100vh - 105px)";  
                addSpotContainer.style.backgroundColor = "white"; 
                addSpotContainer.style.zIndex = "9999"; 
                addSpotContainer.style.borderRadius = "10px"; 
                addSpotContainer.style.padding = "1rem"; 
                addSpotContainer.style.boxShadow = "none"; 

                console.log("‚úÖ add-spot-container „ÅÆË°®Á§∫‰ΩçÁΩÆ„ÇíÂæÆË™øÊï¥„Åó„Åæ„Åó„ÅüÔºÅ");
            });
        });

        // ‚úÖ `back-button` „ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÔºànull„ÉÅ„Çß„ÉÉ„ÇØ„ÅÇ„ÇäÔºâ
        if (backButton) {
            backButton.addEventListener("click", function () {
                console.log("üîô `Êàª„Çã„Éú„Çø„É≥` „Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„ÅüÔºÅ");

                // ‚úÖ add-spot-container „ÇíÈùûË°®Á§∫
                addSpotContainer.style.display = "none";

                // ‚úÖ „Éï„ÉÉ„Çø„Éº„ÇíÂæ©Ê¥ª
                footer.style.display = "block"; 
            });
        } else {
            console.warn("‚ö†Ô∏è `back-button` „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„Éô„É≥„Éà„ÇíÈÅ©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ");
        }
    }

    // ‚úÖ MutationObserver „ÅÆË®≠ÂÆö
    let observer = new MutationObserver(mutations => {
        console.log("üîÑ MutationObserver „ÅåÁô∫ÁÅ´„Åó„Åæ„Åó„ÅüÔºÅ");

        observer.disconnect();
        setTimeout(() => {
            updateBodyDays();
            observer.observe(headerDaysContainer, { childList: true });
            console.log("üîÑ MutationObserver „ÅÆÂæå„Å´ Body „ÇíÂÜçÊèèÁîª");
        }, 200);
    });

    observer.observe(headerDaysContainer, { childList: true });

    // ‚úÖ 100ms Âæå„Å´ `bindAddSpotEvents` „ÇíÈÅ©Áî®
    setTimeout(() => {
        bindAddSpotEvents();
    }, 100);


    function renderItineraryBody() {
        console.log("üîÑ `renderItineraryBody()` ÂÆüË°å");
    
        let itineraryId = document.getElementById("itinerary-data").dataset.itineraryId;
        if (!itineraryId) {
            console.error("‚ùå `itineraryId` „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºÅ");
            return;
        }
    
        let storedSpots = JSON.parse(localStorage.getItem(`itinerary_spots_${itineraryId}`)) || [];
        console.log("üü¢ localStorage „Åã„ÇâÂèñÂæó:", storedSpots);
    
        document.querySelectorAll(".day-body").forEach(container => {
            container.innerHTML = ""; // ÂêÑ Day „ÅÆ„Ç≥„É≥„ÉÜ„Éä„Çí„ÇØ„É™„Ç¢
        });
    
        let spotsByDay = {};
        storedSpots.forEach(spot => {
            if (!spot.day || spot.day === "undefined") {
                console.error("‚ùå `day` „ÅÆ„Éá„Éº„Çø„Åå `undefined` „Åß„ÅôÔºÅ‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ", spot);
                return;
            }
    
            if (!spotsByDay[spot.day]) spotsByDay[spot.day] = [];
            spotsByDay[spot.day].push(spot);
        });
    
        for (let day in spotsByDay) {
            let dayContainer = document.querySelector(`#day-body-${day}`);
            if (!dayContainer) {
                console.warn(`‚ö†Ô∏è Day ${day} „ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÊñ∞Ë¶è‰ΩúÊàê„Åó„Åæ„Åô`);
                let newDayBody = document.createElement("div");
                newDayBody.classList.add("row", "mt-2", "day-body");
                newDayBody.dataset.day = day;
                newDayBody.id = `day-body-${day}`;
                newDayBody.style.display = "flex";
    
                newDayBody.innerHTML = `
                    <div class="col-2">
                        <div class="day-box text-center text-light">Day ${day}</div>
                    </div>
                `;
    
                document.getElementById("day-container").appendChild(newDayBody);
                dayContainer = newDayBody;
            }
    
            console.log(`‚úÖ „Çπ„Éù„ÉÉ„Éà„ÇíËøΩÂä†„Åô„Çã Day ${day} „ÅÆ„Ç≥„É≥„ÉÜ„Éä„ÇíÂèñÂæó`, dayContainer);
    
            spotsByDay[day].forEach((spot, index) => {
                let imageSection = "";
                if (spot.image_url && spot.image_url !== "no-image") {
                    imageSection = `<img src="${spot.image_url}" class="spot-image">`;
                } else {
                    imageSection = `<h3 class="no-image-text">No Image</h3>`;
                }
    
                let newSpotElement = document.createElement("div");
                newSpotElement.classList.add("itinerary-spot");
                newSpotElement.dataset.placeId = spot.place_id;
    
                newSpotElement.innerHTML = `
                    <div class="itinerary-spot-header">
                        ${imageSection}
                        <span class="spot-name">${spot.name}</span>
                        <button class="remove-spot" data-index="${index}">‚ùå</button>
                    </div>
                    <p class="spot-address">${spot.address}</p>
                `;
    
                dayContainer.appendChild(newSpotElement);
                console.log(`‚úÖ Day ${day} „Å´„Çπ„Éù„ÉÉ„ÉàËøΩÂä†: ${spot.name}`);
            });
        }
    
        bindRemoveEvents();
    }
    
    

    function bindRemoveEvents() {
        document.querySelectorAll(".remove-spot").forEach(button => {
            button.addEventListener("click", function () {
                let index = this.dataset.index;
                storedSpots.splice(index, 1);
                saveToLocalStorage();
                renderItineraryBody();
            });
        });
    }

    renderItineraryBody();

    document.querySelectorAll(".btn-white-orange").forEach(button => {
        button.addEventListener("click", function () {
            let spotCard = this.closest(".search-result-card");

            let selectedDay = document.querySelector(".day-tab.active").dataset.day; // üî• ÈÅ∏Êäû‰∏≠„ÅÆDay
            let spotData = {
                place_id: spotCard.dataset.placeId,
                name: spotCard.querySelector(".search-result-name").textContent,
                address: spotCard.querySelector(".search-result-address").textContent,
                day: selectedDay, // üî• Day ÊÉÖÂ†±„ÇíËøΩÂä†
                order: storedSpots.filter(s => s.day === selectedDay).length + 1 // üî• „Åù„ÅÆDay„ÅÆ‰∏≠„ÅÆÈ†ÜÁï™
            };

            storedSpots.push(spotData);
            saveToLocalStorage();
            renderItineraryBody();
        });
    });
    function getPhotoUrl(placeId, callback) {
    let request = { placeId: placeId, fields: ["photos"] };
    let service = new google.maps.places.PlacesService(document.createElement("div"));

    service.getDetails(request, function (place, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK && place.photos && place.photos.length > 0) {
            let photoUrl = place.photos[0].getUrl({ maxWidth: 400, maxHeight: 400 });
            callback(photoUrl);
        } else {
            callback("no-image");
        }
    });
}

});
